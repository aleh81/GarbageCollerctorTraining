using System;

namespace GarbageCollector.Part1
{
    internal class Car
    {
        /*В реальности при очистке сборщик мусора вызывает мутод Finalize класса Car.*/
        ~Car()
        {
            Console.WriteLine("Вызван деструктор обьекта класса Car");
            Console.Beep();
            /*Тут мы например закрываем подключение к БД*/
        }
    }
    class Program
    {
        static void Main(string[] args)
        {
            DestructorExample();

            /*Если вручную не вызвать GC.Collect то деструктор класса Car не сработает,
             пока не появиться необходимость в сборке мусора, а она появиться лишь когда будет заполнена память (или программа 
             не завершит работу),та в наших приложениях мы будем работать с неуправляемыми ресурсами такими как БД, и я хочу быть 
             уверенным что контекст к БД закроется в определенный момент когда мне это будет выгодно. Поэтому 
             мы сейчас вызываем GC.Collect который смотрит в таблицу финализируемых обьектов, видит что объект car
             финализируем так как у него определен деструктор в котором и выполняется логика финализации обьекта*/

            GC.Collect();

            /*Важно понимать все минусы данного кода. А проблема в том что для того чтобы закрыть подключение например к БД
             мы заставляем сборщик мусора собрать весь мусор. А это очень дорогая операция, а нам не надо чистить память мы просто хотим закрыть подключение.
             А теперь представте что таких подключений много, тоесть наша програ постоянно конектиться к бд и разрывает подключение, а если учесть,
             что когда работает сборщик муссора поток программы останавливается, будет полный ппц*/
            
            Console.ReadKey();
        }

        private static void DestructorExample()
        {
            var car = new Car();
            /*ВАЖНО понимать что после завершение этого метода Garbage Collector пометит переемнную car
             как удаляемую так как ссылок в памяти на переменную car не будет*/
        }
    }
}
